<?php

if ( ! class_exists( 'GFForms' ) ) {
	exit();
}

/**
 * Gravity Forms Mollie Add-On API library.
 *
 * @since     1.0
 * @package   GravityForms
 * @author    Rocketgenius
 * @copyright Copyright (c) 2020, Rocketgenius
 */
class GF_Mollie_API {

	/**
	 * Mollie API URL.
	 *
	 * @since 1.0
	 *
	 * @var string $api_url Mollie API URL.
	 */
	protected $api_url = 'https://api.mollie.com/v2';

	/**
	 * Gravity API URL.
	 *
	 * @since 1.0
	 *
	 * @var string $gravity_api_url Gravity API URL.
	 */
	protected static $gravity_api_url = 'https://gravityapi.com/wp-json/gravityapi/v1';

	/**
	 * Auth tokens.
	 *
	 * @since 1.0
	 *
	 * @var array $auth_data Tokens and expiry information.
	 */
	protected $auth_data = array();

	/**
	 * Initialize Mollie API library.
	 *
	 * @since 1.0
	 *
	 * @param array $auth_data array with tokens and expiry information.
	 */
	public function __construct( $auth_data = null ) {

		$this->auth_data = $auth_data;

	}

	/**
	 * Get Gravity API URL for path.
	 *
	 * @since 1.0
	 *
	 * @param string $path Endpoint path.
	 *
	 * @return string URL for Gravity API endpoint.
	 */
	public static function get_gravity_api_url( $path = '' ) {

		if ( '/' !== substr( $path, 0, 1 ) ) {
			$path = '/' . $path;
		}

		return defined( 'GRAVITY_API_URL' ) ? GRAVITY_API_URL . '/auth/mollie' . $path : self::$gravity_api_url . '/auth/mollie' . $path;

	}

	/**
	 * Get organization info.
	 *
	 * @return array|WP_Error
	 */
	public function get_organization() {

		return $this->make_request( '/organizations/me' );

	}

	/**
	 * Use refresh token to get new access token.
	 *
	 * @since 1.0
	 *
	 * @return array|WP_Error Return auth data on success, otherwise error.
	 */
	public function refresh_token() {

		$auth_data = $this->auth_data;

		// If refresh token is not in settings, return exception.
		if ( ! rgar( $this->auth_data, 'refresh_token' ) ) {
			return new WP_Error( 'mollie_refresh_token_error', esc_html__( 'Refresh token must be provided.', 'gravityformsmollie' ) );
		}

		$response = $this->make_request( '/refresh', array( 'refreshtoken' => rgar( $this->auth_data, 'refresh_token' ) ), 'POST', true );

		if ( is_wp_error( $response ) ) {
			return $response;
		}

		// Store and return new access token.
		$auth_data['access_token'] = rgar( $response, 'access_token' );
		$auth_data['expires_in']   = rgar( $response, 'expires_in' );
		$auth_data['time_created'] = time();

		$this->auth_data = $auth_data;

		return $auth_data;
	}

	/**
	 * Create a Mollie Payment.
	 *
	 * @since 1.0
	 *
	 * @param array  $payment_details Details of payment.
	 * @param string $type            Payment type, can be payments or orders.
	 *
	 * @return array|WP_Error Mollie payment, if request failed return error.
	 */
	public function create_payment( $payment_details, $type = 'payments' ) {

		$path = '/' . $type;
		if ( $type === 'orders' ) {
			$path .= '?embed=payments';
		}

		return $this->make_request( $path, $payment_details, 'POST' );

	}

	/**
	 * Update a Mollie Payment or Order.
	 *
	 * @since 1.0
	 *
	 * @param integer $payment_id   ID of payment.
	 * @param string  $description  new description for payment.
	 * @param string  $redirect_url new Redirect URL for payment.
	 * @param string  $webhook_url  new Webhook URL for payment.
	 * @param array   $meta_data    new meta data for payment.
	 * @param boolean $test_mode    true if testmode is active.
	 *
	 * @return array|WP_Error Return Mollie payment details, if request failed return error.
	 */
	public function update_mollie_payment( $payment_id, $description = '', $redirect_url = '', $webhook_url = '', $meta_data = array(), $test_mode = false ) {

		$type = empty( $description ) ? 'orders' : 'payments';

		$update_options = array(
			'testmode' => $test_mode,
		);

		if ( '' !== $description ) {
			$update_options['description'] = $description;
		}
		if ( '' !== $redirect_url ) {
			$update_options['redirectUrl'] = $redirect_url;
		}
		if ( '' !== $webhook_url ) {
			$update_options['webhookUrl'] = $webhook_url;
		}
		if ( ! empty( $meta_data ) ) {
			if ( $type === 'orders' ) {
				$update_options['orderNumber'] = $meta_data['entry_id'];
			} else {
				// metadata can only be updated in the Payments API.
				$update_options['metadata'] = $meta_data;
			}
		}

		return $this->make_request( "/{$type}/" . $payment_id, $update_options, 'PATCH' );

	}

	/**
	 * Retrieve Mollie Payment or Order status.
	 *
	 * @since 1.0
	 *
	 * @param string  $payment_id Payment ID (generated by Mollie).
	 * @param boolean $test_mode  true if in test mode.
	 * @param string $type        Payment type, can be payments or orders.
	 *
	 * @return array|WP_Error Mollie payment details, if request failed return error.
	 */
	public function get_mollie_payment( $payment_id, $test_mode, $type = 'payments' ) {

		$test_arg = ( true === $test_mode ) ? array( 'testmode' => 'true' ) : array();

		return $this->make_request( "/$type/" . $payment_id, $test_arg );

	}

	/**
	 * Get profiles for current Mollie user.
	 *
	 * @since 1.0
	 *
	 * @return array|WP_Error Mollie profiles, or false on error.
	 */
	public function get_profiles() {

		// Reduce number of API calls.
		static $profiles;

		if ( isset( $profiles ) ) {
			return $profiles;
		}

		$response = $this->make_request( '/profiles' );

		if ( is_wp_error( $response ) ) {
			return $response;
		}

		$profiles = rgars( $response, '_embedded/profiles', array() );
		return $profiles;

	}

	/**
	 * Get list of payment methods for Mollie profile id.
	 *
	 * @since 1.0
	 *
	 * @param integer $profile_id Profile ID (generated by Mollie).
	 * @param bool    $test_mode  True if test mode is active.
	 * @param string  $currency   Currency to show payment methods for.
	 *
	 * @return array|WP_Error payment methods, if request failed return error.
	 */
	public function get_methods( $profile_id, $test_mode = false, $currency = '' ) {
		static $methods;

		if ( ! isset( $methods ) ) {
			$test_mode = $test_mode ? 'true' : 'false';

			$request_details = array(
				'profileId' => $profile_id,
				'testmode'  => $test_mode,
				'locale'    => get_locale(),
			);

			if ( empty( $currency ) ) {
				$currency = GFCommon::get_currency();
			}

			$amount = gf_mollie()->get_amount_formatted( 5, $currency );

			$request_details['amount'] = array(
				'value'    => $amount,
				'currency' => $currency,
			);

			$response = $this->make_request(
				'/methods',
				$request_details
			);

			if ( is_wp_error( $response ) ) {
				return $response;
			}

			$methods = rgars( $response, '_embedded/methods', array() );
		}

		return $methods;
	}

	/**
	 * Retrieve Mollie onboarding status
	 *
	 * @since 1.0
	 *
	 * @return array|WP_Error Return onboarding status object, if request failed return error.
	 */
	public function get_onboarding_status() {

		return $this->make_request( '/onboarding/me' );

	}

	/**
	 * Revoke Mollie refresh token
	 *
	 * @since 1.0
	 *
	 * @return boolean|WP_Error Result of the revoking request, if network request failed return error.
	 */
	public function revoke_refresh_token() {

		$request_options = array(
			'token_type_hint' => 'refresh_token',
			'token'           => rgar( $this->auth_data, 'refresh_token', '' ),
		);

		return $this->make_request( '/disconnect', $request_options, 'POST', true );

	}





	// # REQUEST METHODS -----------------------------------------------------------------------------------------------

	/**
	 * Make API request.
	 *
	 * @since 1.0
	 *
	 * @param string  $path            Path of endpoint.
	 * @param array   $options         Options for endpoint.
	 * @param string  $method          HTTP method. Defaults to GET.
	 * @param boolean $use_gravity_api If true, send request to Gravity API server, otherwise use Mollie API.
	 *
	 * @return array|WP_Error return result data, if request failed return error.
	 */
	private function make_request( $path, $options = array(), $method = 'GET', $use_gravity_api = false ) {

		if ( '/' !== substr( $path, 0, 1 ) ) {
			$path = '/' . $path;
		}

		// Build request options string.
		$request_options = 'GET' === $method ? '?' . http_build_query( $options ) : null;

		// Use Mollie API or Gravity API?
		$request_url = ( true === $use_gravity_api ) ? $this->get_gravity_api_url( $path ) : $this->api_url . $path;

		// Build request URL.
		$request_url = $request_url . $request_options;

		// Build request arguments.
		$request_args = array(
			'method'    => $method,
			'body'      => 'GET' !== $method ? wp_json_encode( $options ) : '',
			'headers'   => array(
				'Accept'        => 'application/json',
				'Content-Type'  => 'application/json',
				'Authorization' => 'Bearer ' . rgar( $this->auth_data, 'access_token', '' ),
			),
			/**
			 * Filters if SSL verification should occur.
			 *
			 * @since 1.0
			 *
			 * @param bool false If the SSL certificate should be verified. Defalts to false.
			 *
			 * @return bool
			 */
			'sslverify' => apply_filters( 'https_local_ssl_verify', false ),
			/**
			 * Sets the HTTP timeout, in seconds, for the request.
			 *
			 * @since 1.0
			 *
			 * @param int    30           The timeout limit, in seconds. Defaults to 30.
			 * @param string $request_url The request URL.
			 *
			 * @return int
			 */
			'timeout'   => apply_filters( 'http_request_timeout', 30, $request_url ),
		);

		// Execute API request.
		$response = wp_remote_request( $request_url, $request_args );
		if ( is_wp_error( $response ) ) {
			return $response;
		}

		$response_code = wp_remote_retrieve_response_code( $response );

		if ( $response_code < 300 ) {
			// Return result.
			return json_decode( $response['body'], true );
		}

		// Return WP_Error.
		$error_details = json_decode( wp_remote_retrieve_body( $response ), true );

		if ( ! is_null( $error_details ) ) {

			gf_mollie()->log_error( __METHOD__ . '(): request to API returned an error; ' . rgar( $error_details, 'detail' ) );
			return new WP_Error(
				$response_code,
				rgar( $error_details, 'title' ) . ': ' . rgar( $error_details, 'detail' ),
				wp_remote_retrieve_body( $response )
			);

		} else {

			// In the unlikely event Mollie didn't return an error.
			gf_mollie()->log_error( __METHOD__ . '(): request to API returned an error, no details available.' );
			return new WP_Error(
				$response_code,
				/* translators: A request sent to Mollie returned an error, no error details available.  */
				esc_html__( 'Your payment can not be processed by Mollie, no error details available.', 'gravityformsmollie' ),
				wp_remote_retrieve_body( $response )
			);

		}
	}

}

